from kivy.uix.image import Image
from kivymd.app import MDApp
from kivymd.uix.screen import MDScreen
from kivy.uix.screenmanager import ScreenManager,RiseInTransition,SlideTransition,FadeTransition
from kivy.uix.label import Label
from kivy.uix.button import Button
from kivymd.uix.button import MDRectangleFlatButton,MDRaisedButton
from kivy.uix.relativelayout import RelativeLayout
from kivy.uix.boxlayout import BoxLayout
from kivy.storage.jsonstore import JsonStore
from kivy.config import Config
from datetime import datetime,timedelta
from kivy.metrics import dp

Config.set('input', 'mouse', 'mouse,multitouch_on_demand') # makes it so right clicking will not make red dots appear

store = JsonStore('data.json')

class PlannerApp(MDApp): #main app where everything is added or removed
    def build(self):
        self.theme_cls.theme_style = "Dark"
        self.theme_cls.theme_style_switch_animation = True
        self.theme_cls.primary_palette = "Teal"
        self.theme_cls.accent_palette = "Orange"
        last_screen = ""
        most_recent_day_button = 0
        current_day = datetime.now()
        startingScreen = ScreenHandler()
        startingScreen.add_widget(StartScreen(name = 'start'))
        startingScreen.add_widget(OptionScreen(name = 'settings'))
        startingScreen.add_widget(MainScreen(name = 'main'))
        startingScreen.add_widget(DayScreen(name = 'day'))
        startingScreen.add_widget(MenuScreen(name = 'menu'))
        return  startingScreen
    
    def switch_theme_style(self,color):
        self.theme_cls.primary_palette = color
    
    def switch_accent_style(self,color):
        self.theme_cls.accent_palette =  color

    def switch_to_last_screen(self,transition):
        app.root.transition = transition
        app.root.current = app.last_screen

    def on_stop(self):
        try:
            store.put(self.current_day,cur_text = app.root.get_screen("day").ids.textbox.text)
            store.put("notes",cur_text = app.root.get_screen("main").ids.notes.text)
        except:
            print("An exception occurred")

    def reload_buttons(self,cur_day):
        handler = app.root
        for i in range(3):
            handler.get_screen("main").ids["day" + str(i+1)].text = str((cur_day + timedelta(days = i)).day) + " \n" + (cur_day + timedelta(days = i)).strftime("%A")
    def get_current_day(self):
        try:
            return app.current_day
        except:
            return datetime.now()
    
    def open_menu(self):
        app.root.transition = SlideTransition(direction = 'right')
        app.last_screen = app.root.current
        app.root.current = 'menu'
class StartButton(MDRaisedButton):
    def on_press(self):
        handler = app.root
        handler.transition = FadeTransition()
        app.last_screen = handler.current
        handler.current = 'main'
        if store.exists("notes"):
            handler.get_screen('main').ids.notes.text = store.get("notes")['cur_text']

class OptionButton(MDRaisedButton):
    def on_press(self):
        handler = app.root
        handler.transition = RiseInTransition()
        app.last_screen = handler.current
        handler.current = 'settings'

class Title(Image):
    pass

class StartScreen(MDScreen):
    pass

class OptionScreen(MDScreen): 
    pass

class MainScreen(MDScreen):
    pass

class DayScreen(MDScreen):
    pass

class ScreenHandler(ScreenManager):
    pass
    
class MenuScreen(MDScreen):
    pass
if __name__ == '__main__': #opens the app
    app = PlannerApp()
    app.run()
